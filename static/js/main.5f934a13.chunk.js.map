{"version":3,"sources":["components/Titles.js","components/Form.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Titles","react_default","a","createElement","Form","props","onSubmit","getWeather","type","name","placeholder","className","Weather","city","country","temperature","humidity","description","error","API_KEY","App","state","undefined","e","preventDefault","target","elements","value","length","_this","setState","fetch","concat","then","d","json","data","main","temp","sys","weather","catch","console","log","components_Titles","components_Form","this","components_Weather","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5f934a13.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Titles = () => (\r\n    <div>\r\n        <h1>Weather Finder</h1>\r\n        <h3>Find out weather condition of any location</h3>\r\n    </div>\r\n);\r\n\r\nexport default Titles;","import React from \"react\";\r\n\r\nconst Form = props => (\r\n    <form onSubmit={props.getWeather}>\r\n        <input type=\"text\" name=\"city\" placeholder=\"City...\" />\r\n        <input type=\"text\" name=\"country\" placeholder=\"Country...\" />\r\n        <button className=\"waves-effect waves-light btn\">Get Weather</button>\r\n    </form>\r\n);\r\n\r\nexport default Form;","import React from \"react\";\r\n\r\nconst Weather = props => (\r\n    <div>\r\n        {/* set condition to display desired output */}\r\n        {\r\n            props.city && props.country && <p> Location:\r\n\t \t\t<span className=\"weather__value\"> {props.city}, {props.country} </span>\r\n            </p>\r\n        }\r\n        {\r\n            props.temperature && <p> Temperature:\r\n\t \t\t<span className=\"weather__value\"> {props.temperature} </span>\r\n            </p>\r\n        }\r\n        {\r\n            props.humidity && <p> Humidity:\r\n\t \t\t<span className=\"weather__value\"> {props.humidity} </span>\r\n            </p>\r\n        }\r\n        {\r\n            props.description && <p> Conditions:\r\n\t \t\t<span className=\"weather__value\"> {props.description} </span>\r\n            </p>\r\n        }\r\n        {\r\n            props.error && <p className=\"weather__error\">{props.error}</p>\r\n        }\r\n    </div>\r\n);\r\n\r\nexport default Weather;","import React, { Component } from 'react';\n\nimport Titles from \"./components/Titles\";\nimport Form from \"./components/Form\";\nimport Weather from \"./components/Weather\";\nimport './App.css'\n// weather-app api key needs to be generated for new production\nconst API_KEY = \"8a1e2fa92e140ef112e22d3bce428ec7\";\n\nclass App extends Component {\n  // state to retain multiple data \n  state = {\n    temperature: undefined,\n    city: undefined,\n    country: undefined,\n    humidity: undefined,\n    description: undefined,\n    error: undefined\n  }\n  // function that handels api call \n  getWeather = (e) => {\n    e.preventDefault(); // prevents page from refreshig upon submision\n    const city = e.target.elements.city.value; // gets user input for city\n    const country = e.target.elements.country.value; // gets user input for country\n    // condition to initialize to fetch data only when user put values\n    if (city.length < 1 || country.length < 1) {\n      this.setState({\n        error: \"enter a city and country\"\n      })\n      return;\n    }\n    fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}&units=metric`)\n      .then(d => d.json()) // makes api call to get data from api properties\n      .then(data => this.setState({\n        temperature: data.main.temp,\n        city: data.name,\n        country: data.sys.country,\n        humidity: data.main.humidity,\n        description: data.weather[0].description,\n        error: \"\"\n      }))\n      .catch(e => console.log(e))\n  }\n  render() {\n    return (\n      <div className=\"container card wrapper main\">\n        <div className=\"row\">\n          <div className=\"col-xs-5 title-container\">\n            <Titles />\n          </div>\n          <div className=\"col-xs-7 form-container\">\n            {/* set properties to pass values in Form and Weather components */}\n            <Form getWeather={this.getWeather} />\n            <Weather\n              temperature={this.state.temperature}\n              humidity={this.state.humidity}\n              city={this.state.city}\n              country={this.state.country}\n              description={this.state.description}\n              error={this.state.error}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}